var debugvar = "";

var AuthenticablePrincipal = {

    ShowAuthenticablePrincipalActionModal: function (dialogType, client) {
        UiGlobal.ResetAlertState();
        switch (dialogType)
        {
            case "Add":
                $('#commitAuthenticablePrincipalButton').click(function () {
                    AuthenticablePrincipal.AddAuthPrincipal(client);
                });
                break;
            case "Edit":
                AuthenticablePrincipal.LoadEditAuthPrincipalModalData(client);
                $('#commitAuthenticablePrincipalButton').click(function () {
                    AuthenticablePrincipal.EditAuthPrincipal(client);
                });
                break;
            default:
                $('#commitAuthenticablePrincipalButton').click(function () {
                    AuthenticablePrincipal.AddAuthPrincipal(client);
                });
        }
        $("#authenticablePrincipalActionModal").modal("show");
    },

    LoadEditAuthPrincipalModalData: function (client)
    {
        $('#authPrincipalUpn').val(client.userPrincipalName);
        $('#authPrincipalEnabled').val(client.enabled);
        $('#localLogonEnabled').val(client.localLogonEnabled);
        AuthenticablePrincipal.InitializeAlternativeUpnActionModalSelect2(client);
    },

    EditAuthPrincipal: function (client)
    {
        $.extend(client, {
            userPrincipalName: $("#authPrincipalUpn").val(),
            enabled: $("#authPrincipalEnabled").is(":checked"),
            localLogonEnabled: $("#localLogonEnabled").is(":checked"),
            alternativeUserPrincipalNames: UiGlobal.GetSelectedOptions(AuthenticablePrincipal.AlternativeUpnActionModalSelect2())        
        });

        AuthenticablePrincipal.Grid.jsGrid("updateItem", client);

        $("#authenticablePrincipalActionModal").modal("hide");
    },

    AddAuthPrincipal: function (client) {
        $.extend(client, {
            userPrincipalName: $("#authPrincipalUpn").val(),
            enabled: $("#authPrincipalEnabled").is(":checked"),
            localLogonEnabled: $("#localLogonEnabled").is(":checked")
        });

        AuthenticablePrincipal.Grid.jsGrid("insertItem", client);

        $("#authenticablePrincipalActionModal").modal("hide");
    },

    InitializeGrid: function ()
    {
        AuthenticablePrincipal.Grid = $("#authenticablePrincipalTable");

        AuthenticablePrincipal.Grid.jsGrid({
            height: "auto",
            width: "100%",

            //filtering: true,
            editing: false,
            sorting: true,
            paging: true,
            autoload: true,

            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this external identity source?",

            controller: AuthenticablePrincipal.Controller,

            //rowClick: function (args) {
            //    AuthenticablePrincipal.ShowAuthenticablePrincipalActionModal("Edit", args.item);
            //},

            fields: [
                { name: "userPrincipalName", type: "text", title: "UPN" },
                {
                    name: "alternativeUserPrincipalNames",
                    title: "Alternative UPN",
                    itemTemplate: function (value, item) {

                        var altUpnSelect = $("<select style='width:100%' class='alternativeupn-select2' multiple='multiple'>");


                        if (item.alternativeUserPrincipalNames != null)
                        {
                            item.alternativeUserPrincipalNames.forEach(function (option) {
                                altUpnSelect.append($('<option>', {
                                    value: option,
                                    text: option
                                }).attr('selected', true));
                            });
                        }
                        

                        altUpnSelect = altUpnSelect.attr('disabled', true);
                        return altUpnSelect;

                    }
                },
                { name: "localLogonEnabled", type: "checkbox", title: "LocalLogonEnabled", width: 40 },
                { name: "enabled", type: "checkbox", title: "Enabled", sorting: false, width: 25 },
                {
                    title: "Action",
                    width: 15,
                    itemTemplate: function (value, item) {

                        var btn = $("<i>");
                        btn.addClass("fa fa-key");
                        btn.attr('cm-id', item.id);
                        btn.attr('cm-upn', item.userPrincipalName);
                        
                        return btn.on("click", function (event) {
                            var id = event.target.attributes["cm-id"].value
                            var upn = event.target.attributes["cm-upn"].value
                            AuthenticablePrincipal.ResetPasswordButtonClick(id, upn);
                            return false;
                        });

                        //var $text = $("<p>").text('derp');
                        //var $link = $("<a>").attr("href", item.MyItemUrl).text("Go To Item");
                        //return $("<div>").append($text).append($link);

                    }

                },
                {
                    width: 25,
                    type: "control",
                    editButton: false,
                    headerTemplate: function () {
                        return $("<button>").attr("type", "button").text("Add")
                            .on("click", function () {
                                AuthenticablePrincipal.ShowAuthenticablePrincipalActionModal("Add", {});
                            });
                    }
                }
            ],
            onRefreshed: function (args) { AuthenticablePrincipal.InitializeAlternativeUpnSelect2(); },
            onItemUpdated: function (args) { AuthenticablePrincipal.InitializeAlternativeUpnSelect2(); },
            onItemEditing: function (args) { AuthenticablePrincipal.InitializeAlternativeUpnSelect2(); },
            onItemInserting: function (args) { UiGlobal.ResetAlertState(); },
            onItemUpdating: function (args) { UiGlobal.ResetAlertState(); AuthenticablePrincipal.InitializeAlternativeUpnSelect2(); },
            onItemDeleting: function (args) { UiGlobal.ResetAlertState(); },
            onDataLoading: function (args) { AuthenticablePrincipal.InitializeAlternativeUpnSelect2(); },
            onDataLoaded: function (args) { AuthenticablePrincipal.InitializeAlternativeUpnSelect2(); }
        });

        AuthenticablePrincipal.InitializeAlternativeUpnSelect2();
    },

    Controller: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/security/authenticable-principals",
                dataType: "json"
            }).done(function (response) {
                d.resolve(response.payload);
            });
            return d.promise();
        },
        insertItem: function (item) {
            $.ajax({
                type: "POST",
                url: "/security/authenticable-principal",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                AuthenticablePrincipal.HandleError(xhr.responseJSON.message, AuthenticablePrincipal.Grid);
            });
        },

        updateItem: function (item) {

            $.ajax({
                type: "PUT",
                url: "/security/authenticable-principal",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                AuthenticablePrincipal.HandleError(xhr.responseJSON.message, AuthenticablePrincipal.Grid);
            });
        },

        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/security/authenticable-principal",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                AuthenticablePrincipal.HandleError(xhr.responseJSON.message, AuthenticablePrincipal.Grid);
            });
        },

        onItemInserting: function (args) { AuthenticablePrincipal.ResetErrorState(); },
        onItemUpdating: function (args) { AuthenticablePrincipal.ResetErrorState(); },
        onItemDeleting: function (args) { AuthenticablePrincipal.ResetErrorState(); }
    },

    ResetErrorState: function () {
        UiGlobal.HideError();
    },

    HandleError: function (msg, grid) {
        grid.jsGrid("render");
        UiGlobal.ShowError(msg);
    },

    InitializeSelect: function () {
        CmOptions.ExternalIdentitySourceType.forEach(function (item) {
            $('#eisType').append($('<option>', {
                value: item.Name,
                text: item.Name
            }));
        });
    },

    ImportUserSelections: [],

    InitializeUserSearchSelect: function () {

        $('.idp-select').select2({ data: CmOptions.ExternalIdentitySources });

        AuthenticablePrincipal.ImportUserSelect = $(".user-search-select");

        AuthenticablePrincipal.ImportUserSelect.select2({
            placeholder: 'search for an ad object',
            ajax: {

                url: ("/identity-source/external/query/users"),
                dataType: 'json',
                type: 'get',
                delay: 30,
                data: function (params) {
                    return {
                        query: params.term, // search term
                        page: params.page
                    };
                },
                processResults: function (data, params) {
                    // parse the results into the format expected by Select2
                    // since we are using custom formatting functions we do not need to
                    // alter the remote JSON data, except to indicate that infinite
                    // scrolling can be used
                    params.page = params.page || 1;

                    return {
                        results: data.payload,
                        //pagination: {
                        //    more: (params.page * 30) < data.total_count
                        //}
                    };
                },
                cache: true
            },
            escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
            minimumInputLength: 2,
            templateResult: AuthenticablePrincipal.formatRepo, // omitted for brevity, see the source of this page
            templateSelection: AuthenticablePrincipal.formatRepoSelection // omitted for brevity, see the source of this page
        });

        AuthenticablePrincipal.ImportUserSelect.on("select2:selecting", function (e) {
            AuthenticablePrincipal.ImportUserSelections.push(e.params.args.data);
        });
    },

    formatRepo: function (repo) {

        var markup = '<div class="user-select-container">'
        markup = markup + '<div class="user-select-title">' + repo.samAccountName + ' ; ' + repo.name + ' ; ' + repo.displayName + '</div>';
        markup = markup + '<div class="user-select-details">UserPrincipalName: <span class="user-select-details-value">' + repo.userPrincipalName + '</span></div>';
        markup = markup + '<div class="user-select-details">Domain: <span class="user-select-details-value">' + repo.domain + '</span></div>';
        markup = markup + '</div>';
        //var markup = repo.text;
        return markup;
    },

    formatRepoSelection: function (repo) {
        return repo.samAccountName;
        //return repo.name || repo.text;
        //return repo.text;
    },

    FormatExistingUserMergeRepository: function (repo)
    {
        return repo.userPrincipalName;
    },

    FormatExistingUserMergeSelection: function (repo)
    {
        return repo.userPrincipalName;
    },

    ImportSelectedUsers: function ()
    {
        UiGlobal.ResetAlertState();

        
        if (AuthenticablePrincipal.MergeOnImport)
        {
            var data = {
                users: AuthenticablePrincipal.ImportUserSelections,
                mergeWith: AuthenticablePrincipal.ExistingUserMergeSelect2().val(),
                merge: AuthenticablePrincipal.MergeOnImport
            };
        }
        else
        {
            var data = {
                users: AuthenticablePrincipal.ImportUserSelections,
                merge: AuthenticablePrincipal.MergeOnImport
            };
        }
        


        Services.ImportUsersFromExternalIdentitySource(data, AuthenticablePrincipal.ImportSelectedUsersSuccessCallback, AuthenticablePrincipal.ImportSelectedUsersErrorCallback);


    },

    ImportSelectedUsersSuccessCallback: function ()
    {
        AuthenticablePrincipal.ImportUserSelections = [];
        AuthenticablePrincipal.ResetUserSelect();
        UiGlobal.RefreshGrid(AuthenticablePrincipal.Grid);

        UiGlobal.ShowSuccess("Successfully imported the selected users");

    },

    ImportSelectedUsersErrorCallback: function (e) {
        AuthenticablePrincipal.ImportUserSelections = [];
        AuthenticablePrincipal.ResetUserSelect();
        UiGlobal.ShowError("Error while importing users: " + e.responseJSON.message);
    },

    Grid: null,

    ImportUserSelect: null,

    ResetUserSelect: function ()
    {
        AuthenticablePrincipal.ImportUserSelect.select2('val', 'All');
    },

    AlternativeUpnSelect2: function () {
        return $('.alternativeupn-select2');
    },

    InitializeAlternativeUpnActionModalSelect2: function (client)
    {
        if (client.alternativeUserPrincipalNames != null) {
            client.alternativeUserPrincipalNames.forEach(function (option) {

                if (!AuthenticablePrincipal.AlternativeUpnActionModalSelect2().val().includes(option))
                {
                    AuthenticablePrincipal.AlternativeUpnActionModalSelect2().append($('<option>', {
                        value: option,
                        text: option
                    }).attr('selected', true));
                }
                
            });
        }

        AuthenticablePrincipal.AlternativeUpnActionModalSelect2().select2({ width: '100%', tags: true });
    },

    AlternativeUpnActionModalSelect2ClearOptions: function ()
    {
        var select = AuthenticablePrincipal.AlternativeUpnActionModalSelect2()[0];
        var length = select.options.length;
        for (i = 0; i < length; i++) {
            select.options[i] = null;
        }
    },

    AlternativeUpnActionModalSelect2: function ()
    {
        return $('.alternativeupn-actionmodal-select2');
    },

    InitializeAlternativeUpnSelect2: function ()
    {
        AuthenticablePrincipal.AlternativeUpnSelect2().select2({ width: '100%' });
    },

    RegisterModalCloseEvent: function ()
    {
        $('#authenticablePrincipalActionModal').on('hidden.bs.modal', function () {
            $('#authPrincipalUpn').val('');
            $('#authPrincipalEnabled').val('');
            $('#localLogonEnabled').val('');
            AuthenticablePrincipal.AlternativeUpnActionModalSelect2ClearOptions();
        });
    },

    RegisterImportUserModalCloseEvent: function ()
    {
        $('#importUsersModal').on('hidden.bs.modal', function () {
            $('#authPrincipalUpn').val('');
            $('#authPrincipalEnabled').val('');
            $('#localLogonEnabled').val('');
            AuthenticablePrincipal.AlternativeUpnActionModalSelect2ClearOptions();
        });
    },

    PageLoad: function ()
    {
        AuthenticablePrincipal.InitializeGrid();
        AuthenticablePrincipal.InitializeUserSearchSelect();
        AuthenticablePrincipal.RegisterModalCloseEvent();
        AuthenticablePrincipal.RegisterMergeCheckboxEvent();
        AuthenticablePrincipal.InitializeExistingUserMergeSelect2();
    },

    MergeOnImport: false,

    ShowMergeExistingUserSelect: function ()
    {
        $('.existingUserSelect').show();
    },

    HideMergeExistingUserSelect: function ()
    {
        $('.existingUserSelect').hide();
    },

    RegisterMergeCheckboxEvent: function () {
        $('#mergeCheckbox').change(function () {
            if ($(this).is(":checked")) {
                AuthenticablePrincipal.MergeOnImport = true;
                AuthenticablePrincipal.ShowMergeExistingUserSelect();
            }
            else
            {
                AuthenticablePrincipal.MergeOnImport = false;
                AuthenticablePrincipal.HideMergeExistingUserSelect();
            }
        });
    },

    ExistingUserMergeSelect2: function ()
    {
        return $('#existingUserSelect');
    },

    InitializeExistingUserMergeSelect2: function ()
    {
        AuthenticablePrincipal.ExistingUserMergeSelect2().select2({
            width: '100%',
            placeholder: 'Search for a Certificate Manager user',
            ajax: {
                url: ("/security/authenticable-principals"),
                dataType: 'json',
                type: 'get',
                delay: 30,
                //data: function (params) {
                //    return {
                //        query: params.term, // search term
                //        page: params.page
                //    };
                //},
                processResults: function (data, params) {
                    params.page = params.page || 1;

                    return {
                        results: data,
                    };
                },
                cache: true
            },
            escapeMarkup: function (markup) { return markup; },
            //minimumInputLength: 2,
            templateResult: AuthenticablePrincipal.FormatExistingUserMergeRepository,
            templateSelection: AuthenticablePrincipal.FormatExistingUserMergeSelection,

        });
    },

    ResetPasswordButtonClick: function (id, upn)
    {
        //console.log('reset password button click');
        //console.log(id);
        //console.log(upn);


        $('#reset-pwd-id').val(id)
        $('#reset-pwd-upn').val(upn);

        $("#resetUserPasswordModal").modal("show");

        
        return false;
    },

    ResetUserPassword: function ()
    {
        var id = $('#reset-pwd-id').val();
        var newPassword = $('#reset-pwd-password').val();

        var data = {
            id: id,
            newPassword: newPassword
        };

        $('#reset-pwd-password').val('');

        Services.ResetUserPassword(data, UiGlobal.ShowSuccess, UiGlobal.ShowError);
    }



}
var CmOptions = {
    hashAlgorithmOptions: [
        { Name: "SHA1", Id: 0, Display: "SHA1 (Insecure)" },
        { Name: "SHA256", Id: 1, Display: "SHA256 (Recommended)", Primary: true },
        { Name: "SHA512", Id: 2, Display: "SHA512 (Most Secure)" }
    ],
    cipherOptions: [
        { Name: "RSA", Id: 0, Display: "RSA (TLS / More Support)", Primary: true },
        { Name: "ECDH", Id: 1, Display: "ECDH (TLS / Most Secure)" },
        { Name: "ECDSA", Id: 2, Display: "ECDSA (Uncommon)" }
    ],

    keyUsageOptions: [
        { Name: "None", Id: 0, Primitive: true, Display: "None" },
        { Name: "ServerAuthentication", Id: 1, Primitive: true, Display: "ServerAuthentication", Primary: true },
        { Name: "ClientAuthentication", Id: 2, Primitive: true, Display: "ClientAuthentication" },
        { Name: "ServerAuthentication, ClientAuthentication", Id: 3, Primitive: false, Display: "ServerAuthentication, ClientAuthentication" },
        { Name: "DocumentEncryption", Id: 4, Primitive: true, Display: "DocumentEncryption" },
        { Name: "CodeSigning", Id: 8, Primitive: true, Display: "CodeSigning" },
        { Name: "CertificateAuthority", Id: 16, Primitive: true, Display: "CertificateAuthority" },
        { Name: "Undetermined", Id: 32, Primitive: true, Display: "Undetermined" }

    ],
    windowsApiOptions: [
        { Name: "Cng", Id: 1, Display: "CryptoApi Next Generation (Most Secure)", Primary: true },
        { Name: "CryptoApi", Id: 0, Display: "CryptoApi (More Support)" }
    ],
    //windowsApiOptions: ["Cng", "CryptoApi"],
    authenticationTypeOptions: [
        { Name: "UsernamePassword", Id: 0, Display: "basic", Primary: true },
        { Name: "WindowsKerberos", Id: 1, Display: "kerberos" }
    ],
    ExternalIdentitySourceType: [
        { Name: "ActiveDirectoryIwa", Id: 0, Display: "ActiveDirectoryIwa" },
        { Name: "ActiveDirectoryBasic", Id: 1, Display: "ActiveDirectoryBasic" },
    ],

    LocalIdentityProviderId: "02abeb4c-e0b6-4231-b836-268aa40c3f1c"
}
function openTab(evt, tabName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    location.hash = tabName;
    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    // Show the current tab, and add an "active" class to the button that opened the tab
    document.getElementById(tabName).style.display = "block";
    $('.' + tabName).addClass("active");
};


var UIDefaults = {
    GetEnumMap: function () {
        if (localStorage.getItem("uiEnumMap") === null) {
            Services.GetEnumMapping();

            while (localStorage.getItem("uiEnumMap") === null)
            {

            }
            return JSON.parse(localStorage.getItem("uiEnumMap"));
        }
        else {
            return JSON.parse(localStorage.getItem("uiEnumMap"));
        }
    }
};


var UiGlobal = {

    GetWindowsApiDisplay: function (name)
    {
        var displayName = "unknown";

        CmOptions.windowsApiOptions.forEach(function (item) {

            if (item.Name == name)
            {
                displayName = item.Display;
            }
        });

        return displayName;
    },

    GetShortDateTime: function (value, item) {
        var date = new Date(value)
        return date.toDateString();
    },
    RefreshGrid: function (grid)
    {
        grid.jsGrid("render");
    },
    ResetAlertState: function ()
    {
        UiGlobal.HideError();
        UiGlobal.HideSuccess();
    },
    ShowSuccess: function (msg)
    {
        $('#success-alert').text(msg)
        $('#success-alert').show();
    },
    HideSuccess: function (msg)
    {
        $('#success-alert').hide();
    },
    ShowError: function (msg)
    {
        $('#error-alert').text(msg)
        $('#error-alert').show();
    },
    HideError: function ()
    {
        $('#error-alert').hide();
    },
    ShowCurrentTab: function ()
    {
        if (location.hash === "" || location.hash === null) {
            $('#defaultOpen').click();
        }
        else
        {
            var currentTab = location.hash.replace("#", "");
            $("." + currentTab).click();
        }
    },

    ShowModal: function (id) {
        $("#" + id).modal("show");
    },
    GetSelectedOptions: function (obj)
    {
        var selectedArray = [];

        var selected = obj.find(":selected");

        for (i = 0; i < selected.length; i++) {
            selectedArray.push(selected[i].value);
        }

        return selectedArray;
    },

    GetDateString(arg) {
        return (new Date(arg)).toDateString();
    }
}

var certSearchResult = null;

var Services = {
 
    CreateCertificate: function (request, successCallback, errorCallback) {
        $.ajax({
            url: "/ca/private/certificate/request/includeprivatekey",
            type: 'post',
            data: {
                SubjectCommonName: request.SubjectCommonName,
                SubjectDepartment: request.SubjectDepartment,
                SubjectOrganization: request.SubjectOrganization,
                SubjectCity: request.SubjectCity,
                SubjectState: request.SubjectState,
                SubjectCountry: request.SubjectCountry,
                SubjectAlternativeNamesRaw: request.SubjectAlternativeNamesRaw,
                CipherAlgorithm: request.CipherAlgorithm,
                Provider: request.Provider,
                HashAlgorithm: request.HashAlgorithm,
                KeySize: request.KeySize,
                KeyUsage: request.KeyUsage
            },
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    GetCertificateDetails: function (id, successCallback, errorCallback) {
        $.ajax({
            url: "/certificate/" + id,
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    SearchCertificates: function (query, successCallback, errorCallback)
    {
        $.ajax({
            url: "/certificates/search",
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                certSearchResult = data;
                //successCallback(data);
            },
            error: function (x, t, m) {
                //errorCallback(x, t, m);
            }
        });
    },

    GetAdcsTemplates: function (successCallback, errorCallback) {
        $.ajax({
            url: "/pki-config/templates",
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
            }
        });
    },

    GetEnumMapping: async function () {
        const response = await axios.get("/view/enum-mapping");
        localStorage.setItem("uiEnumMap", JSON.stringify(response.data));

    },

    GetSecurityRoleDetails: function (id, successCallback, errorCallback)
    {
        $.ajax({
            url: "/security/role/" + id,
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    ImportUsersFromExternalIdentitySource: function (data, successCallback, errorCallback)
    {
        $.ajax({
            url: "/security/authenticable-principal/import",
            type: 'post',
            cache: false,
            async: true,
            dataType: "json",
            data: data,
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    GetAppConfig: function (successCallback, errorCallback)
    {
        $.ajax({
            url: "/config",
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    SetAppConfig: function (data, successCallback, errorCallback)
    {
        $.ajax({
            url: "/config",
            type: 'put',
            cache: false,
            async: true,
            data: data,
            dataType: "json",
            success: function (data) {
                successCallback();
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    ResetUserPassword: function (data, successCallback, errorCallback) {
        $.ajax({
            url: "/security/authenticable-principal/password",
            type: 'put',
            cache: false,
            async: true,
            data: data,
            dataType: "json",
            success: function (response) {
                successCallback("Successfully reset password");
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    SetLocalAppConfig: function (data, successCallback, errorCallback) {
        $.ajax({
            url: "/config/local",
            type: 'put',
            cache: false,
            async: true,
            data: data,
            dataType: "json",
            success: function (data) {
                successCallback();
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    }

}

var ExternalIdentitySources = {

    ShowAuthApiActionModal: function (dialogType, client) {

        if (dialogType === "Add")
        {
            $('#commitAuthApiEntity').click(function () {

                ExternalIdentitySources.AddAuthApiCertificate(client);
            });
        }
        else
        {

        }
        

        $("#authApiActionModal").modal("show");
    },

    ShowAddExternalIdentitySourceModal: function (dialogType, client) {

        $('#commitAuthApiEntity').click(function () {

            ExternalIdentitySources.AddEis(client, "Add");
        });

        $("#addExternalIdentitySourceModal").modal("show");
    },

    AddEis: function (client, isNew) {
        $.extend(client, {
            name: $("#eisName").val(),
            domain: $("#eisDomain").val(),
            username: $("#eisUsername").val(),
            password: $("#eisPassword").val(),
            enabled: $("#eisEnabled").val(),
            searchBase: $("#eisSearchBase").val(),
        });

        $("#externalIdentitySourcesTable").jsGrid(isNew ? "insertItem" : "updateItem", client);

        $("#addExternalIdentitySourceModal").modal("hide");
    },

    AddAuthApiCertificate: function (client) {
        $.extend(client, {
            id: $("#thumbprint").val(),
            primary: $("#primary").is(":checked")
        });

        $("#authApiSigningCertificatesTable").jsGrid("insertItem", client);

        $("#authApiActionModal").modal("hide");
    },

    InitializeAuthApiGrid: function ()
    {
        $('#authApiSigningCertificatesTable').jsGrid({
            height: "auto",
            width: "100%",

            //filtering: true,
            editing: false,
            sorting: true,
            paging: true,
            autoload: true,

            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this external identity source?",

            controller: ExternalIdentitySources.AuthApiController,

            fields: [
                { name: "displayName", type: "text", title: "DisplayName" },
                { name: "thumbprint", type: "text", title: "Thumbprint" },
                { name: "hasPrivateKey", type: "checkbox", title: "HasPrivateKey", sorting: false },
                { name: "primary", type: "checkbox", title: "Primary", sorting: false },
                {
                    type: "control",
                    editButton: false,
                    headerTemplate: function () {
                        return $("<button>").attr("type", "button").text("Add")
                            .on("click", function () {
                                ExternalIdentitySources.ShowAuthApiActionModal("Add", {});
                            });
                    }
                }
            ]
        });
    },

    InitializeGrid: function ()
    {
        $("#externalIdentitySourcesTable").jsGrid({
            height: "auto",
            width: "100%",

            //filtering: true,
            editing: true,
            sorting: true,
            paging: true,
            autoload: true,

            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this external identity source?",

            controller: ExternalIdentitySources.Controller,

            fields: [
                { name: "name", type: "text", title: "Name" },
                { name: "domain", type: "text", title: "Domain" },
                { name: "searchBase", type: "text", title: "SearchBase" },
                { name: "externalIdentitySourceType", type: "select", items: CmOptions.ExternalIdentitySourceType, valueType: "string", valueField: "Name", textField: "Name", title: "Type" },
                { name: "username", type: "text", title: "Username" },
                { name: "password", type: "text", readOnly: true, title: "password" },
                { name: "enabled", type: "checkbox", title: "Enabled", sorting: false },
                {
                    type: "control",
                    headerTemplate: function () {
                        return $("<button>").attr("type", "button").text("Add")
                            .on("click", function () {
                                ExternalIdentitySources.ShowAddExternalIdentitySourceModal("Add", {});
                            });
                    }
                }
            ]
        });
    },

    Controller: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/cm-config/external-identity-sources",
                dataType: "json"
            }).done(function (response) {
                d.resolve(response);
            });
            return d.promise();
        },
        insertItem: function (item) {
            $.ajax({
                type: "POST",
                url: "/cm-config/external-identity-source",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                ExternalIdentitySources.HandleError(xhr.responseJSON.message, $("#externalIdentitySourcesTable"));
            });
        },

        updateItem: function (item) {

            $.ajax({
                type: "PUT",
                url: "/cm-config/external-identity-source",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                ExternalIdentitySources.HandleError(xhr.responseJSON.message, $("#externalIdentitySourcesTable"));
            });
        },

        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/cm-config/external-identity-source",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                ExternalIdentitySources.HandleError(xhr.responseJSON.message, $("#externalIdentitySourcesTable"));
            });
        },

        onItemInserting: function (args) { ExternalIdentitySources.ResetErrorState(); },
        onItemUpdating: function (args) { ExternalIdentitySources.ResetErrorState(); },
        onItemDeleting: function (args) { ExternalIdentitySources.ResetErrorState(); }
    },

    AuthApiController: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/identity-sources/local-authapi/trustedcertificates",
                dataType: "json"
            }).done(function (response) {
                d.resolve(response.payload);
            });
            return d.promise();
        },
        insertItem: function (item) {
            $.ajax({
                type: "POST",
                url: "/identity-sources/local-authapi/trustedcertificate",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                ExternalIdentitySources.HandleError(xhr.responseJSON.message, $("#authApiSigningCertificatesTable"));
            });
        },

        updateItem: function (item) {

            $.ajax({
                type: "PUT",
                url: "/identity-sources/local-authapi/trustedcertificate",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                ExternalIdentitySources.HandleError(xhr.responseJSON.message, $("#authApiSigningCertificatesTable"));
            });
        },

        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/identity-sources/local-authapi/trustedcertificate",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                ExternalIdentitySources.HandleError(xhr.responseJSON.message, $("#authApiSigningCertificatesTable"));
            });
        },

        onItemInserting: function (args) { ExternalIdentitySources.ResetErrorState(); },
        onItemUpdating: function (args) { ExternalIdentitySources.ResetErrorState(); },
        onItemDeleting: function (args) { ExternalIdentitySources.ResetErrorState(); }
    },

    ResetErrorState: function () {
        UiGlobal.HideError();
    },

    HandleError: function (textStatus, grid) {
        grid.jsGrid("render");
        UiGlobal.ShowError(textStatus.responseJSON.message);
    },

    InitializeSelect: function () {
        CmOptions.ExternalIdentitySourceType.forEach(function (item) {
            $('#eisType').append($('<option>', {
                value: item.Name,
                text: item.Name
            }));
        });
    },

    CertificateSelect2: null,

    InitializeCertificateSelect2: function ()
    {
        ExternalIdentitySources.CertificateSelect2.select2({
            width: '100%',
            placeholder: 'Search for a certificate',
            ajax: {
                url: ("/certificates/search/summary"),
                dataType: 'json',
                type: 'get',
                delay: 30,
                //data: function (params) {
                //    return {
                //        query: params.term
                //    };
                //},
                processResults: function (data, params) {
                    //params.page = params.page || 1;

                    return {
                        results: data.payload,
                    };
                },
                cache: false
            },
            escapeMarkup: function (markup) { return markup; },
            templateResult: ExternalIdentitySources.FormatCertificate,
            templateSelection: ExternalIdentitySources.FormatCertificateSelection,

        });
    },

    FormatCertificate: function (repo) {

        var markup = '<div class="user-select-container">'
        markup = markup + '<div class="cert-select-title"><b>' + repo.displayName + '</b></div>';
        markup = markup + '<div class="cert-select-details">Thumbprint: <span class="cert-select-details-value">' + repo.thumbprint + '</span></div>';
        markup = markup + '<div class="cert-select-details">Expires: <span class="cert-select-details-value">' + UiGlobal.GetDateString(repo.expiry) + '</span></div>';
        //markup = markup + '<div class="user-select-details">Domain: <span class="user-select-details-value">' + repo.domain + '</span></div>';
        markup = markup + '</div>';
        //var markup = repo.text;
        return markup;
    },

    FormatCertificateSelection: function (repo) {
        return repo.thumbprint;
    },

    GetAppConfigSuccessCallback: function (data)
    {
        $('#jwtValidityPeriod').val(data.payload.jwtValidityPeriod);
        $('#localIdpIdentifier').val(data.payload.localIdpIdentifier);
        $('#allowLocalAuthentication').prop('checked', data.payload.localLogonEnabled);
        $('#allowEmergencyAccess').prop('checked', data.payload.emergencyAccessEnabled);
    },

    SaveAppConfigSuccessCallback: function ()
    {
        UiGlobal.ShowSuccess("Successfully saved app configuration");
    },

    PageLoad: function ()
    {
        ExternalIdentitySources.InitializeSelect();
        ExternalIdentitySources.InitializeGrid();
        ExternalIdentitySources.CertificateSelect2 = $('#thumbprint');
        ExternalIdentitySources.InitializeCertificateSelect2();
        ExternalIdentitySources.InitializeAuthApiGrid();
        Services.GetAppConfig(ExternalIdentitySources.GetAppConfigSuccessCallback, null);
        UiGlobal.ShowCurrentTab();
    },

    SetAppConfig: function()
    {
        UiGlobal.ResetAlertState();

        var data = {
            jwtValidityPeriod: $('#jwtValidityPeriod').val(),
            localIdpIdentifier: $('#localIdpIdentifier').val()
        }

        Services.SetAppConfig(data, ExternalIdentitySources.SaveAppConfigSuccessCallback, null);
    },

    SetLocalAppConfig: function ()
    {

        UiGlobal.ResetAlertState();

        var data = {
            localLogonEnabled: $('#allowLocalAuthentication').prop('checked'),
            emergencyAccessEnabled: $('#allowEmergencyAccess').prop('checked')
        }

        Services.SetLocalAppConfig(data, ExternalIdentitySources.SaveAppConfigSuccessCallback, null);
    }
}
var Login = {

    PageLoad: function ()
    {
        Login.ShowErrorIfUnsuccessful();
        Login.InitializeAlternativeLoginOptions();
        Login.ConfigureAuthBypass();
        Login.InitializeDomainSelect();   
    },

    ShowErrorIfUnsuccessful: function ()
    {
        if (Login.IsAuthFailure())
        {
            UiGlobal.ShowError();
        }
    },

    ConfigureAuthBypass: function ()
    {
        //controlled by form post
    },

    InitializeAlternativeLoginOptions: function ()
    {
        $('#altLoginMethodCheckbox').change(function () {
            if ($(this).is(":checked")) {
                $('.alt-login-btn').show();
            }
            else {
                $('.alt-login-btn').hide();
            }
        });
    },

    InitializeDomainSelect: function ()
    {
        CmOptions.ExternalIdentitySources.forEach(function (item) {
            if (item.enabled) {
                var element = $('#domain');

                element.append($('<option>', {
                    value: item.id,
                    text: item.name
                }));
            }
        });

        if (CmOptions.LocalAuthenticationEnabled)
        {
            var element = $('#domain');

            element.append($('<option>', {
                value: CmOptions.LocalIdentityProviderId,
                text: 'Local'
            }));
        }
    },

    IsAuthFailure: function ()
    {
        if (document.URL.indexOf("authentication_failure") > -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

}
var debugData = "";

var PkiConfig = {

    ResolveIdpName: function (value, item)
    {
        var idpDisplayName = "";

        CmOptions.ExternalIdentitySources.forEach(function (idp) {


            if (idp.id == item.identityProviderId) {
                idpDisplayName = idp.name
            }


        });

        if (idpDisplayName === "") {
            idpDisplayName = "none";
        }

        return idpDisplayName;
    },

    InitializeSelect: function ()
    {
        CmOptions.hashAlgorithmOptions.forEach(function (item) {

            var caHash = $('#caHash');

            var element = $('#adcsTemplateHash');

            element.append($('<option>', {
                value: item.Name,
                text: item.Name
            }));


            caHash.append($('<option>', {
                value: item.Name,
                text: item.Name
            }));

            if (item.Primary === true)
            {
                caHash.val(item.Name);
                element.val(item.Name);
            }   
        });

        CmOptions.cipherOptions.forEach(function (item) {
            $('#adcsTemplateCipher').append($('<option>', {
                value: item.Name,
                text: item.Name,
            }));
        });
        
        CmOptions.keyUsageOptions.forEach(function (item) {
            $('#adcsTemplateKeyUsage').append($('<option>', {
                value: item.Name,
                text: item.Name
            }));
        });

        CmOptions.windowsApiOptions.forEach(function (item) {
            $('#adcsTemplateWindowsApi').append($('<option>', {
                value: item.Name,
                text: item.Name
            }));
        });


        //CmOptions.authenticationTypeOptions.forEach(function (item) {
        //    $('#caAuthenticationType').append($('<option>', {
        //        value: item.Name,
        //        text: item.Name
        //    }));
        //});

        //CmOptions.ExternalIdentitySources.forEach(function (item) {
        //    if (item.enabled)
        //    {
        //        $('#caAuthenticationRealm').append($('<option>', {
        //            value: item.id,
        //            text: item.name
        //        }));
        //    }
        //});
        
    },

    ResetErrorState: function () {
        UiGlobal.HideError();
    },

    HandleError: function (textStatus, grid) {
        grid.jsGrid("render");
        UiGlobal.ShowError(textStatus.responseJSON.message);
    },

    AddTemplate: function (client, isNew) {

        var allowedToIssueList = "";
        $('#adcsTemplateAllowedToIssue').val().forEach(function (item) {

            if (allowedToIssueList === "")
            {
                allowedToIssueList = item;
            }
            else
            {
                allowedToIssueList = allowedToIssueList + ';' + item;
            }

        });


        $.extend(client, {
            name: $("#adcsTemplateName").val(),
            //hash: $("#adcsTemplateHash").val(),
            cipher: $("#adcsTemplateCipher").val(),
            keyUsage: $("#adcsTemplateKeyUsage").val(),
            windowsApi: $("#adcsTemplateWindowsApi").val(),
            rolesAllowedToIssue: allowedToIssueList
        });

        $("#adcsTemplatesTable").jsGrid(isNew ? "insertItem" : "updateItem", client);

        $("#addAdcsTemplateModal").modal("hide");
    },

    ShowAddTemplateModal: function (dialogType, client) {

        $('#addAdcsTemplateButton').click(function () {

            PkiConfig.AddTemplate(client, dialogType === "Add");
        });

        $("#addAdcsTemplateModal").modal("show");
    },

    ShowEditTemplateModal: function (dialogType, client)
    {
        var roleIds = new Array();
        
        for (var key in client.rolesAllowedToIssueSelectView) {
            roleIds.push(client.rolesAllowedToIssueSelectView[key].id);
        }

        $("#adcsTemplateName").val(client.name);
        //$("#adcsTemplateHash").val(client.hash);
        $("#adcsTemplateCipher").val(client.cipher);
        $("#adcsTemplateKeyUsage").val(client.keyUsage);
        $("#adcsTemplateWindowsApi").val(client.windowsApi);


        var roleSelect = document.getElementById('adcsTemplateAllowedToIssue');

        for (i = 0; i < roleSelect.children.length; i++) {

            var option = roleSelect.children[i];

            if (roleIds.includes(option.value))
            {
                option.selected = true;
            }
            else
            {
                option.selected = false;
            }
        }

        PkiConfig.InitializeSelect2();

        $('#addAdcsTemplateButton').click(function () {

            PkiConfig.AddTemplate(client, dialogType === "Add");
        });

        $("#addAdcsTemplateModal").modal("show");
    },

    EditTemplate: function (client)
    {

    },

    ShowAddPrivateCaModal: function (client) {

        PkiConfig.InitializePrivateCaIdentityProviderSelect2();

        $('#commitPrivateCaButton').click(function () {

            PkiConfig.AddPrivateCa(client);
        });

        $("#privateCaActionModal").modal("show");
    },

    ShowEditPrivateCaModal: function (client)
    {
        debugData = client;
        $('#privateCaId').val(client.id);
        $('#caServerName').val(client.serverName);
        $('#caCommonName').val(client.commonName);
        $('#caHash').val(client.hashAlgorithm);
        
        
        PkiConfig.InitializePrivateCaIdentityProviderSelect2();

        $('#commitPrivateCaButton').click(function () {

            PkiConfig.ChangePrivateCa(client);
        });

        $("#privateCaActionModal").modal("show");
    },

    AddPrivateCa: function (client, isNew) {
        $.extend(client, {
            serverName: $("#caServerName").val(),
            commonName: $("#caCommonName").val(),
            hashAlgorithm: $("#caHash").val(),
            authenticationRealm: $("#caAuthenticationRealm").val(),
            authenticationType: $("#caAuthenticationType").val(),
            username: $("#caUsername").val(),
            password: $("#caPassword").val()
        });

        $("#privateCaTable").jsGrid("insertItem", client);

        $("#privateCaActionModal").modal("hide");
    },

    ChangePrivateCa: function (client) {
        $.extend(client, {
            id: $('#privateCaId').val(),
            serverName: $("#caServerName").val(),
            commonName: $("#caCommonName").val(),
            hashAlgorithm: $("#caHash").val(),
            identityProviderId: $('#caIdentityProvider').val()
        });

        $("#privateCaTable").jsGrid("updateItem", client);

        $("#privateCaActionModal").modal("hide");
    },

    PrivateCertificateAuthoritiesController: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/pki-config/certificate-authorities/private",
                dataType: "json"
            }).done(function (response) {
                d.resolve(response.payload);
            });
            return d.promise();
        },
        insertItem: function (item) {
            $.ajax({
                type: "POST",
                url: "/pki-config/certificate-authority/private",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                PkiConfig.HandleError(xhr.responseJSON.message, $("#privateCaTable"));
            });
        },

        updateItem: function (item) {
            var d = $.Deferred();
            $.ajax({
                type: "PUT",
                url: "/pki-config/certificate-authority/private",
                data: item
            }).done(function (response) {
                d.resolve(response.payload);
            }).fail(function (xhr, ajaxOptions, thrownError) {
                PkiConfig.HandleError(xhr.responseJSON.message, $("#privateCaTable"));
                });
            return d.promise();
        },

        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/pki-config/certificate-authority/private",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                PkiConfig.HandleError(xhr.responseJSON.message, $("#privateCaTable"));
            });
        }  
    },

    AdcsTemplateController: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/pki-config/templates",
                //data: filter,
                dataType: "json"
            }).done(function (response) {
                d.resolve(response.payload);
            });
            return d.promise();
        },

        insertItem: function (item) {
            var d = $.Deferred();
            $.ajax({
                type: "POST",
                url: "/pki-config/template",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                PkiConfig.HandleError(xhr.responseJSON.message, $("#adcsTemplatesTable"));
                });
            return d.promise();
        },

        updateItem: function (item) {
            var d = $.Deferred();
            $.ajax({
                type: "PUT",
                url: "/pki-config/template",
                data: item
            }).done(function (response) {
                d.resolve(response.payload);
            }).fail(function (xhr, ajaxOptions, thrownError) {
                PkiConfig.HandleError(xhr.responseJSON.message, $("#adcsTemplatesTable"));
                });
            return d.promise();
        },

        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/pki-config/template",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                PkiConfig.HandleError(xhr.responseJSON.message, $("#adcsTemplatesTable"));
                });

        }
    },

    InitializePkiConfigGrids: function () {

        $("#adcsTemplatesTable").jsGrid({
            height: "auto",
            width: "100%",

            //filtering: true,
            editing: false,
            sorting: true,
            paging: true,
            autoload: true,

            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this template?",

            controller: PkiConfig.AdcsTemplateController,

            rowClick: function (args) {
                PkiConfig.ShowEditTemplateModal("Edit", args.item);
            },
            
            fields: [
                { title: "Template Name", name: "name", type: "text", validate: { validator: "rangeLength", param: [1, 100] }, width: 80 },
                //{ title: "Server Name", name: "hash", type: "select", items: CmOptions.hashAlgorithmOptions, valueType: "string", valueField: "Name", textField: "Name", width: 30 },
                { title: "Cipher", name: "cipher", type: "select", items: CmOptions.cipherOptions, valueField: "Name", textField: "Name", width: 30 },
                { title: "Key Usage", name: "keyUsage", type: "select", items: CmOptions.keyUsageOptions, valueField: "Name", textField: "Name" },
                { title: "WindowsApi", name: "windowsApi", type: "select", items: CmOptions.windowsApiOptions, valueField: "Name", textField: "Name", width: 40 },
                {
                    title: "Roles Allowed To Issue This Template",
                    name: "rolesAllowedToIssue",
                    itemTemplate: function (value, item) {

                        var roleSelect = $("<select style='width:100%' class='security-roles-adcs-select2' multiple='multiple'>");

                        item.rolesAllowedToIssueSelectView.forEach(function (option) {
                            roleSelect.append($('<option>', {
                                value: option.id,
                                text: option.name
                            }).attr('selected', true));
                        });

                        roleSelect = roleSelect.attr('disabled', true);
                        return roleSelect;
                        //return $("<div>").append(roleSelect);
                    }
                },
                {
                    width:25,
                    editButton: false,
                    type: "control",
                    headerTemplate: function () {
                        return $("<button>").attr("type", "button").text("Add")
                            .on("click", function () {
                                PkiConfig.ShowAddTemplateModal("Add", {});
                            });
                    }
                }
            ],
            onRefreshed: function (args) { PkiConfig.InitializeSelect2(); },
            onItemUpdated: function (args) { PkiConfig.InitializeSelect2(); },
            onItemEditing: function (args) { PkiConfig.InitializeSelect2(); },
            onItemInserting: function (args) { PkiConfig.ResetErrorState(); },
            onItemUpdating: function (args) { PkiConfig.ResetErrorState(); PkiConfig.InitializeSelect2(); },
            onItemDeleting: function (args) { PkiConfig.ResetErrorState(); },
            onDataLoading: function (args) { PkiConfig.InitializeSelect2();}, 
            onDataLoaded: function (args) { PkiConfig.InitializeSelect2();}


        });

        $("#privateCaTable").jsGrid({
            height: "auto",
            width: "100%",

            //filtering: true,
            editing: false,
            sorting: true,
            paging: true,
            autoload: true,

            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this certificate authority?",

            controller: PkiConfig.PrivateCertificateAuthoritiesController,

            rowClick: function (args) {
                PkiConfig.ShowEditPrivateCaModal(args.item);
            },

            fields: [
                { title: "Server Name", name: "serverName", type: "text" },
                { title: "Common Name", name: "commonName", type: "text" },
                { title: "Hash", name: "hashAlgorithm", type: "select", items: CmOptions.hashAlgorithmOptions, valueType: "string", valueField: "Name", textField: "Name" },
                { title: "Identity Provider", name: "identityProviderId", itemTemplate: function (value, item) { return PkiConfig.ResolveIdpName(value, item); }  },
                {
                    type: "control",
                    editButton: false,
                    headerTemplate: function () {
                        return $("<button>").attr("type", "button").text("Add")
                            .on("click", function () {
                                PkiConfig.ShowAddPrivateCaModal({});
                            });
                    }
                }
            ],
            onItemInserting: function (args) { PkiConfig.ResetErrorState(); },
            onItemUpdating: function (args) { PkiConfig.ResetErrorState(); },
            onItemDeleting: function (args) { PkiConfig.ResetErrorState(); }
        });

        var editableAllowedToIssue = $('.security-roles-adcs-select2-editable');

        CmOptions.SecurityRoles.forEach(function (option) {
            editableAllowedToIssue.append($('<option>', {
                //value: item.Name,
                //text: item.Name,
                value: option.Id,
                text: option.Name
            }))
        });
    },

    InitializePrivateCaIdentityProviderSelect2: function ()
    {
        $('#caIdentityProvider').select2({ data: CmOptions.ExternalIdentitySources, width: '100%' });
    },

    InitializeSelect2: function ()
    {
        $('.security-roles-adcs-select2').select2({ width: '100%' });
    }
}


function WriteError(msg) {
    $('#error-alert').text(msg);
    $('#error-alert').show();
}

function DisplayCertificateDetails(data) {
    $("#displayName").text(data.displayName);
    $('#hashAlgorithm').text(data.hashAlgorithm);
    $('#thumbprint').text(data.thumbprint);
    $('#certificate-id').text(data.id);
    $('#cipherAlgorithm').text(data.cipherAlgorithm);
    $('#hasPrivateKey').text(data.hasPrivateKey);
    $('#expires').text(data.validTo);
    $('#keySize').text(data.keySize);
    $('#storageFormat').text(data.certificateStorageFormat);
    $('#windowsApi').text(data.windowsApi);
}

function GetPrivateCertificateRequestData() {
    var request = {
        SubjectCommonName: $('#commonName').val(),
        SubjectDepartment: $('#department').val(),
        SubjectOrganization: $('#organization').val(),
        SubjectCity: $('#city').val(),
        SubjectState: $('#state').val(),
        SubjectCountry: $('#country').val(),
        SubjectAlternativeNamesRaw: $('#sancsv').val(),
        CipherAlgorithm: $('#cipherAlgorithm').val(),
        Provider: $('#windowsApi').val(),
        HashAlgorithm: $('#hashAlgorithm').val(),
        KeySize: $('#keySize').val(),
        KeyUsage: $('#keyUsage').val()
    }

    return request;
}

function ValidateNewPrivateCertificate(request) {

    //var spinner = StartSpinner();
    var keysize = request.KeySize;
    var provider = request.Provider;
    var cipheralg = request.CipherAlgorithm;
    var validRsaKeySizes = ["2048", "4096", "8192", "16384"]
    var keyusage = request.KeyUsage;
    //var role = $('#role').val();


    //0 is RSA
    if (cipheralg == "0") {
        if (validRsaKeySizes.indexOf(keysize) != 0) {
            var msg = "Rsa keysize is invalid. Rsa only supports 2048, 4096, 8192, or 16384. Choose 2048 if you are unsure.";
            WriteError(msg)
            return false;
        }
    }

    //1 is EC
    if (cipheralg == "1") {
        if (provider != "1") {
            var msg = "Elliptic Curve only supports the provider Cng (CryptoApi Next Generation)";
            WriteError(msg);
            return false;
        }

        if (keysize != 256) {
            var msg = "Elliptic Curve only supports a keysize of 256bits";
            WriteError(msg);
            return false;
        }
    }


    if ($("#SubjectCommonName").val() != "") {
        var result = Services.ValidateDnsName($("#SubjectCommonName").val())
        if (result["Status"] != "valid") {
            WriteError("Invalid subject common name provided")
            return false;
        }
    }
    else {
        WriteError("You must specify a subject common name");
        return false;
    }

    if ($("#SubjectAlternativeNamesRaw").val() != "") {
        var result = Services.ValidateDnsSan($("#SubjectAlternativeNamesRaw").val())
        if (result["Status"] != "valid") {
            WriteError("Invalid subject alternative name. Either remove the subject alternative name, or specify the san with correct comma separated format. ")
            return false;
        }
    }


    if (keyusage == null) {
        WriteError("Key Usage must be specified. If you're not an Admin, you won't be able to select anything except 'Server'")
        return false;
    }

    if (!keyusage.constructor == Array) {
        WriteError("Key Usage must be specified. If you're not an Admin, you won't be able to select anything except 'Server'")
        return false;
    }

    if (keyusage.length < 1 || keyusage.length > 3) {
        WriteError("Key Usage must be specified. If you're not an Admin, you won't be able to select anything except 'Server'")
        return false;
    }

    //if (role != "Admin" && keyusage != 1) {
    //    $(".modal-body").text("Key Usage must be specified. If you're not an Admin, you won't be able to select anything except 'Server'");
    //    $('#msgModal').modal('show');
    //    return false;
    //}

    return true;
    //$('#formSubmitButtonHidden').click();


}



var PrivateCertificateAuthority = {

    CreateCertificateSuccessCallback: function (data) {

        window.sessionStorage.setItem("certificateId", data.id);
        $('#create-private-certificate-btn').prop('disabled', false);
        window.location.replace("/view/certificate/" + data.id);
    },

    CreateCertificateErrorCallback: function (x, t, m) {

        WriteError(x.responseJSON.message);

        $('#create-private-certificate-btn').prop('disabled', false);

    },

    GetCertificateErrorCallback: function (x, t, m) {

        //WriteError(x.responseJSON.message);

        //$('#create-private-certificate-btn').prop('disabled', false);

    },

    GetCertificateSuccessCallback: function (data) {
        DisplayCertificateDetails(data);
    },

    GetCertificateDetails: function () {
        //var id = window.location.pathname.replace('/views/certificate/', '');
        var id = window.sessionStorage.getItem("certificateId");
        Services.GetCertificateDetails(id, this.GetCertificateSuccessCallback, this.GetCertificateErrorCallback);
    },

    RegisterCreateCertificateButtonEvent: function () {
        $('#create-private-certificate-btn').click(function () {

            $('#error-alert').hide();
            $('#success-alert').hide();
            $('#create-private-certificate-btn').prop('disabled', true);

            var request = GetPrivateCertificateRequestData();

            //if (!ValidateNewPrivateCertificate(request))
            //{
            //    $('#create-private-certificate-btn').prop('disabled', false);
            //    return false;
            //}

            Services.CreateCertificate(request, PrivateCertificateAuthority.CreateCertificateSuccessCallback, PrivateCertificateAuthority.CreateCertificateErrorCallback);

        });

    },

    InitializeUi: function () {

        CmOptions.hashAlgorithmOptions.forEach(function (item) {

            var element = $('#hashAlgorithm');

            element.append($('<option>', {
                value: item.Name,
                text: item.Name
            }));

            if (item.Primary) {
                element.val(item.Name);
            }
        });

        CmOptions.cipherOptions.forEach(function (item) {
            $('#cipherAlgorithm').append($('<option>', {
                value: item.Name,
                text: item.Display
            }));
        });

        CmOptions.keyUsageOptions.forEach(function (item) {
            if (item.Primitive) {

                if (item.Primary)
                {
                    $('#keyUsage').append($('<option>', {
                        value: item.Name,
                        text: item.Display,
                        selected: "selected"
                    }));
                }
                else
                {
                    $('#keyUsage').append($('<option>', {
                        value: item.Name,
                        text: item.Display
                    }));
                }
                
            }
        });

        $('#keyUsage').select2({ width: '100%' });

        CmOptions.windowsApiOptions.forEach(function (item) {
            $('#windowsApi').append($('<option>', {
                value: item.Name,
                text: item.Display
            }));
        });
    },

    PageLoad: function () {
        PrivateCertificateAuthority.InitializeUi();
        PrivateCertificateAuthority.RegisterCreateCertificateButtonEvent();
    }
};
var SecurityRoleDetails = {

    ShowAddRoleMemberModal: function (dialogType, client) {

        $('#addSecurityRoleMemberButton').click(function () {

            SecurityRoleDetails.AddSecurityRoleMember(client, dialogType === "Add");
        });

        $("#addSecurityRoleMemberModal").modal("show");
    },

    AddSecurityRoleMember: function (client, isNew) {
        $.extend(client, {
            memberId: $("#memberId").val(),
            roleId: $('#roleId').text()
        });

        $("#roleMembersTable").jsGrid(isNew ? "insertItem" : "updateItem", client);

        $("#addSecurityRoleMemberModal").modal("hide");
    },

    RenderViewData: function (data)
    {
        $('#roleName').text(data.payload.name);
    },

    InitializeGrid: function () {
        $("#roleMembersTable").jsGrid({
            height: "auto",
            width: "100%",
            sorting: true,
            paging: true,
            autoload: true,
            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this external identity source?",

            controller: SecurityRoleDetails.MembersController,

            fields: [
                { name: "userPrincipalName", type: "text", title: "userPrincipalName", editing: false },
                { name: "enabled", type: "checkbox", title: "Enabled", sorting: false, editing: false },
                {
                    type: "control",
                    headerTemplate: function () {
                        return $("<button>").attr("type", "button").text("Add")
                            .on("click", function () {
                                SecurityRoleDetails.ShowAddRoleMemberModal("Add", {});
                            });
                    }
                }
            ],

            onItemInserting: function (args) { SecurityRoleDetails.ResetErrorState(); },
            onItemUpdating: function (args) { SecurityRoleDetails.ResetErrorState(); },
            onItemDeleting: function (args) { SecurityRoleDetails.ResetErrorState(); }
        });
    },

    UserAddRoleMemberSelect: null,

    InitializeUserAddRoleMemberSelect: function ()
    {
        SecurityRoleDetails.UserAddRoleMemberSelect = $("#user-select");

        SecurityRoleDetails.UserAddRoleMemberSelect.select2({
            placeholder: 'search for a certificate manager user',
            ajax: {

                url: ("/security/authenticable-principals/search"),
                dataType: 'json',
                type: 'get',
                delay: 30,
                data: function (params) {
                    return {
                        query: params.term, // search term
                        page: params.page
                    };
                },
                processResults: function (data, params) {
                    params.page = params.page || 1;

                    return {
                        results: data.payload,
                    };
                },
                cache: true
            },
            escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
            minimumInputLength: 2,
            templateResult: SecurityRoleDetails.UserSelectFormatRepo, // omitted for brevity, see the source of this page
            templateSelection: SecurityRoleDetails.UserSelectFormatRepoSelection // omitted for brevity, see the source of this page
        });
    },

    UserSelectFormatRepo: function (repo)
    {
        return repo.name;
    },

    UserSelectFormatRepoSelection: function (repo)
    {
        return repo.name;
    },

    MembersController: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/security/role/" + $('#roleId').text() + "/members",
                dataType: "json"
            }).done(function (response) {
                d.resolve(response.payload);
            });
            return d.promise();
        },
        insertItem: function (item) {
            //MembersController.onItemInserting();
            var d = $.Deferred();
            $.ajax({
                type: "POST",
                url: "/security/role/" + $('#roleId').text() + "/member/" + $('#memberId').val()
            }).done(function (response) {
                d.resolve(response.payload);
            }).fail(function (xhr, ajaxOptions, thrownError) {
                SecurityRoleDetails.HandleError(xhr.responseJSON.message, $("#roleMembersTable"));
            });
            return d.promise();
        },

        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/security/role/" + $('#roleId').text() + "/member/" + item.id
            }).fail(function (xhr, ajaxOptions, thrownError) {
                SecurityRoleDetails.HandleError(xhr.responseJSON.message, $("#roleMembersTable"));
            });
        }
    },

    ResetErrorState: function () {
        UiGlobal.HideError();
    },

    HandleError: function (textStatus, grid) {
        grid.jsGrid("render");
        UiGlobal.ShowError(textStatus);
    },

    PageLoad: function ()
    {
        UiGlobal.ShowCurrentTab();
        Services.GetSecurityRoleDetails($('#roleId').text(), SecurityRoleDetails.RenderViewData, null);
        SecurityRoleDetails.InitializeGrid();
        SecurityRoleDetails.InitializeUserAddRoleMemberSelect();
    }
}
var SecurityRoles = {

    ShowAddSecurityRoleModal: function (dialogType, client) {

        //$("#eisName").val(client.name);
        //$("#eisDomain").val(client.hash);
        //$("#eis").val(client.cipher);
        //$("#adcsTemplateKeyUsage").val(client.keyUsage);
        //$("#adcsTemplateWindowsApi").val(client.windowsApi);

        $('#AddSecurityRoleButton').click(function () {

            SecurityRoles.AddRole(client, dialogType === "Add");
        });

        $("#addSecurityRoleModal").modal("show");
    },

    AddRole: function (client, isNew) {
        $.extend(client, {
            name: $("#secRoleName").val(),
            enabled: $("#secRoleEnabled").is(":checked")
        });

        $("#securityRolesTable").jsGrid(isNew ? "insertItem" : "updateItem", client);

        $("#addSecurityRoleModal").modal("hide");
    },

    InitializeGrid: function ()
    {
        $("#securityRolesTable").jsGrid({
            height: "auto",
            width: "100%",

            //filtering: true,
            editing: true,
            sorting: true,
            paging: true,
            autoload: true,

            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this external identity source?",

            controller: SecurityRoles.Controller,

            fields: [
                { name: "name", type: "text", title: "name" },
                //{ name: "domain", type: "text", title: "Domain" },
                //{ name: "searchBase", type: "text", title: "SearchBase" },
                //{ name: "externalIdentitySourceType", type: "select", items: CmOptions.ExternalIdentitySourceType, valueType: "string", valueField: "Name", textField: "Name", title: "Type" },
                //{ name: "username", type: "text", title: "Username" },
                //{ name: "password", type: "text", readOnly: true, title: "password" },
                { name: "enabled", type: "checkbox", title: "Enabled", sorting: false },
                {
                    //css: "security-roles-select2",
                    name: "details",
                    title: "Action", 
                    width: 50,
                    itemTemplate: function (value, item) {
                        //var $text = $("<p>").text(item.MyField);
                        var $link = $("<a>").attr("href", '/view/security/role/' + item.id).text("View");
                        return $("<div>").append($link);
                    }
                },
                {
                    type: "control",
                    
                    headerTemplate: function () {
                        return $("<button>").attr("type", "button").text("Add")
                            .on("click", function () {
                                SecurityRoles.ShowAddSecurityRoleModal("Add", {});
                            });
                    }
                }
            ],

            onItemInserting: function (args) { SecurityRoles.ResetErrorState(); },
            onItemUpdating: function (args) { SecurityRoles.ResetErrorState(); },
            onItemDeleting: function (args) { SecurityRoles.ResetErrorState(); }

        });
    },

    Controller: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/security/roles",
                dataType: "json"
            }).done(function (response) {
                d.resolve(response.payload);
            });
            return d.promise();
        },
        insertItem: function (item) {
            var d = $.Deferred();
            $.ajax({
                type: "POST",
                url: "/security/role",
                data: item
            }).done(function (response) {
                d.resolve(response.payload);
            }).fail(function (xhr, ajaxOptions, thrownError) {
                SecurityRoles.HandleError(xhr.responseJSON.message, $("#securityRolesTable"));
            });
            return d.promise();
        },

        updateItem: function (item) {

            $.ajax({
                type: "PUT",
                url: "/security/role",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                SecurityRoles.HandleError(xhr.responseJSON.message, $("#securityRolesTable"));
            });
        },

        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/security/role",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                SecurityRoles.HandleError(xhr.responseJSON.message, $("#securityRolesTable"));
            });
        }
    },

    ResetErrorState: function () {
        UiGlobal.HideError();
    },

    HandleError: function (textStatus, grid) {
        grid.jsGrid("render");
        UiGlobal.ShowError(textStatus.responseJSON.message);
    },

    InitializeSelect: function () {
        CmOptions.ExternalIdentitySourceType.forEach(function (item) {
            $('#eisType').append($('<option>', {
                value: item.Name,
                text: item.Name
            }));
        });
    }


}

var ViewAllCertificates = {

    PageLoad: function ()
    {
        ViewAllCertificates.Grid = $('#allCertificatesTable');

        ViewAllCertificates.InitializeGrid();
    },

    Grid: null,

    Controller: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/certificates",
                dataType: "json"
            }).done(function (response) {
                d.resolve(response.payload);
            });
            return d.promise();
        },
        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/certificate",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                ViewAllCertificates.HandleError(xhr.responseJSON.message, ViewAllCertificates.Grid);
            });
        }
    },

    InitializeGrid: function ()
    {
        ViewAllCertificates.Grid.jsGrid({
            height: "auto",
            width: "100%",

            //filtering: true,
            editing: false,
            sorting: true,
            paging: true,
            autoload: true,

            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this certificate?",

            controller: ViewAllCertificates.Controller,

            fields: [
                { title: "Display Name", name: "displayName", type: "text" },
                { title: "Hash", name: "hashAlgorithm", type: "text", width: 25 },
                { title: "Cipher", name: "cipherAlgorithm", type: "text", width: 25 },
                {
                    title: "Expires", name: "validTo", type: "text", width: 40,
                    itemTemplate: function (value, item) {
                        return UiGlobal.GetDateString(value);
                    } },
                { title: "Thumbprint", name: "thumbprint", type: "text" },
                {
                    name: "details",
                    title: "Action",
                    width: 20,
                    itemTemplate: function (value, item) {
                        //var $text = $("<p>").text(item.MyField);
                        var $link = $("<a>").attr("href", '/view/certificate/' + item.id).text("View");
                        return $("<div>").append($link);
                    }
                },
                {
                    type: "control",
                    editButton: false,
                    width: 10
                }
            ],

            onItemInserting: function (args) { SecurityRoles.ResetErrorState(); },
            onItemUpdating: function (args) { SecurityRoles.ResetErrorState(); },
            onItemDeleting: function (args) { SecurityRoles.ResetErrorState(); }

        });
    }
}
ViewCertificate = {

    PageLoad: function ()
    {
        document.getElementById("defaultOpen").click();

        ViewCertificate.SubjectAlternativeNameTable = $('#subjectAlternativeNameTable');
        Services.GetCertificateDetails(ViewCertificate.GetCertificateId(), ViewCertificate.GetCertificateSuccessCallback, ViewCertificate.GetCertificateErrorCallback);
        ViewCertificate.InitializeDownloadUx();

    },

    GetCertificateId: function ()
    {
        return $('#certificate-id-hidden').val();
    },

    CertificateData: null,

    SubjectAlternativeNameTable: null,

    GetCertificateSuccessCallback: function (data)
    {
        CertificateData = data;

        $('#displayName').text(data.displayName);
        $('#thumbprint').text(data.thumbprint);
        $('#hashAlgorithm').text(data.hashAlgorithm);
        $('#cipherAlgorithm').text(data.cipherAlgorithm);
        $('#hasPrivateKey').text(data.hasPrivateKey);
        $('#expires').text(UiGlobal.GetDateString(data.expires));
        $('#windowsApi').text(UiGlobal.GetWindowsApiDisplay(data.windowsApi));
        $('#keySize').text(data.keySize);
        $('#storageFormat').text(data.certificateStorageFormat);

        ViewCertificate.InitializeSubjectAlternativeNamesTable(ViewCertificate.SubjectAlternativeNameTable, data.subject.subjectAlternativeName)
    },

    GetCertificateErrorCallback: function ()
    {
        UiGlobal.ShowError();
    },

    InitializeDownloadUx: function ()
    {
        $('#showCertificateDownloadOptionsButton').click(function () {

            $('#certificateDownloadOptionsModal').modal('show');

        });


        $('#cer-radio').change(function () {
            $("#download-certificate-button").prop('disabled', false);
            $("#download-cer-option-der").prop('disabled', false);
            $("#download-cer-option-b64").prop('disabled', false);
            $("#download-cer-option-b64").prop('checked', true);
            $("#cer-background").css("background-color", "#b0c4de");
            $("#pfx-background").css("background-color", "#f5f5f5");
        });

        $('#pfx-radio').change(function () {
            $("#download-certificate-button").prop('disabled', false);
            $("#download-pfx-includechain").prop('disabled', false);
            $("#download-cer-option-b64").prop('disabled', true);
            $("#download-cer-option-der").prop('disabled', true);
            $("#pfx-background").css("background-color", "#b0c4de");
            $("#cer-background").css("background-color", "#f5f5f5");
        });


        $('#download-certificate-button').click(function (e) {
            var type;
            var encoding;
            if ($("#cer-radio").prop("checked")) {
                if ($("#download-cer-option-b64").prop('checked')) {
                    type = "certb64";
                }
                else {
                    type = "certbinary";
                }
                type = "certbinary";
            }
            else if ($("#pfx-radio").prop("checked")) {
                type = "pfx";
            }
            else {
                type = "";
            }

            if ($('#include-chain-checkbox').prop('checked')) {
                type = type + "chain"
            }

            var downloadUri = "/certificate/" + $('#certificate-id').text();

            switch (type) {
                case "certbinarychain":
                    downloadUri = downloadUri + "/download/cer/binary/includechain";
                    break;
                case "certbinary":
                    downloadUri = downloadUri + "/download/cer/binary/nochain";
                    break;
                case "certb64chain":
                    downloadUri = downloadUri + "/download/cer/base64/includechain";
                    break;
                case "certb64":
                    downloadUri = downloadUri + "/download/cer/base64/nochain";
                    break;
                case "pfxchain":
                    downloadUri = downloadUri + "/download/pfx/includechain";
                    break;
                case "pfx":
                    downloadUri = downloadUri + "/download/pfx/nochain";
                    break;
                default:
                    downloadUri = downloadUri + "/download/cer/binary/nochain";
            }

            e.preventDefault();
            window.location.href = downloadUri;

        });
    },

    InitializeSubjectAlternativeNamesTable: function (table, sanList) {
        table.jsGrid({
            width: "100%",
            paging: true,
            autoload: true,
            pageLoading: true,

            controller: {
                loadData: function () {
                    return { data: sanList }
                    //return { data: sanList, itemsCount: 1 }
                }
            },

            fields: [
                {
                    title: "Subject Alternative Name",
                    itemTemplate: function (value, item) {
                        return item;
                    }
                },
            ]
        });
    },

    InitialzeAclTable: function ()
    {

    }

}