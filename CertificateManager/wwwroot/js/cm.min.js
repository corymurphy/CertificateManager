var CmOptions = {
    hashAlgorithmOptions: [
        { Name: "SHA1", Id: 0, Display: "SHA1 (Insecure)" },
        { Name: "SHA256", Id: 1, Display: "SHA256 (Recommended)", Primary: true },
        { Name: "SHA512", Id: 2, Display: "SHA512 (Most Secure)" }
    ],
    cipherOptions: [
        { Name: "RSA", Id: 0, Display: "RSA (TLS / More Support)", Primary: true },
        { Name: "ECDH", Id: 1, Display: "ECDH (TLS / Most Secure)" },
        { Name: "ECDSA", Id: 2, Display: "ECDSA (Uncommon)" }
    ],

    keyUsageOptions: [
        { Name: "None", Id: 0, Primitive: true, Display: "None" },
        { Name: "ServerAuthentication", Id: 1, Primitive: true, Display: "ServerAuthentication", Primary: true },
        { Name: "ClientAuthentication", Id: 2, Primitive: true, Display: "ClientAuthentication" },
        { Name: "ServerAuthentication, ClientAuthentication", Id: 3, Primitive: false, Display: "ServerAuthentication, ClientAuthentication" },
        { Name: "DocumentEncryption", Id: 4, Primitive: true, Display: "DocumentEncryption" },
        { Name: "CodeSigning", Id: 8, Primitive: true, Display: "CodeSigning" },
        { Name: "CertificateAuthority", Id: 16, Primitive: true, Display: "CertificateAuthority" },
        { Name: "Undetermined", Id: 32, Primitive: true, Display: "Undetermined" }

    ],
    windowsApiOptions: [
        { Name: "Cng", Id: 1, Display: "CryptoApi Next Generation (Most Secure)", Primary: true },
        { Name: "CryptoApi", Id: 0, Display: "CryptoApi (More Support)" }
    ],
    //windowsApiOptions: ["Cng", "CryptoApi"],
    authenticationTypeOptions: [
        { Name: "UsernamePassword", Id: 0, Display: "basic", Primary: true },
        { Name: "WindowsKerberos", Id: 1, Display: "kerberos" }
    ],
    ExternalIdentitySourceType: [
        { Name: "ActiveDirectoryIwa", Id: 0, Display: "ActiveDirectoryIwa" },
        { Name: "ActiveDirectoryBasic", Id: 1, Display: "ActiveDirectoryBasic" },
    ]
}
function openTab(evt, tabName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    location.hash = tabName;
    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    // Show the current tab, and add an "active" class to the button that opened the tab
    document.getElementById(tabName).style.display = "block";
    $('.' + tabName).addClass("active");
};


var UIDefaults = {
    GetEnumMap: function () {
        if (localStorage.getItem("uiEnumMap") === null) {
            Services.GetEnumMapping();

            while (localStorage.getItem("uiEnumMap") === null)
            {

            }
            return JSON.parse(localStorage.getItem("uiEnumMap"));
        }
        else {
            return JSON.parse(localStorage.getItem("uiEnumMap"));
        }
    }
};


var UiGlobal = {

    GetWindowsApiDisplay: function (name)
    {
        var displayName = "unknown";

        CmOptions.windowsApiOptions.forEach(function (item) {

            if (item.Name == name)
            {
                displayName = item.Display;
            }
        });

        return displayName;
    },

    GetShortDateTime: function (value, item) {
        var date = new Date(value)
        return date.toDateString();
    },
    RefreshGrid: function (grid)
    {
        grid.jsGrid("render");
    },
    ResetAlertState: function ()
    {
        UiGlobal.HideError();
        UiGlobal.HideSuccess();
    },
    ShowSuccess: function (msg)
    {
        $('#success-alert').text(msg)
        $('#success-alert').show();
    },
    HideSuccess: function (msg)
    {
        $('#success-alert').hide();
    },
    ShowError: function (msg)
    {
        $('#error-alert').text(msg)
        $('#error-alert').show();
    },
    HideError: function ()
    {
        $('#error-alert').hide();
    },
    ShowCurrentTab: function ()
    {
        if (location.hash === "" || location.hash === null) {
            $('#defaultOpen').click();
        }
        else
        {
            var currentTab = location.hash.replace("#", "");
            $("." + currentTab).click();
        }
    },

    ShowModal: function (id) {
        $("#" + id).modal("show");
    },
    GetSelectedOptions: function (obj)
    {
        var selectedArray = [];

        var selected = obj.find(":selected");

        for (i = 0; i < selected.length; i++) {
            selectedArray.push(selected[i].value);
        }

        return selectedArray;
    },

    GetDateString(arg) {
        return (new Date(arg)).toDateString();
    }
}

var baseUri = "http://certificatemanager/"
var certSearchResult = null;


var Services = {

    CreateCertificate: function (request, successCallback, errorCallback) {
        $.ajax({
            url: "/ca/private/certificate/request/includeprivatekey",
            type: 'post',
            data: {
                SubjectCommonName: request.SubjectCommonName,
                SubjectDepartment: request.SubjectDepartment,
                SubjectOrganization: request.SubjectOrganization,
                SubjectCity: request.SubjectCity,
                SubjectState: request.SubjectState,
                SubjectCountry: request.SubjectCountry,
                SubjectAlternativeNamesRaw: request.SubjectAlternativeNamesRaw,
                CipherAlgorithm: request.CipherAlgorithm,
                Provider: request.Provider,
                HashAlgorithm: request.HashAlgorithm,
                KeySize: request.KeySize,
                KeyUsage: request.KeyUsage
            },
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    GetCertificateDetails: function (id, successCallback, errorCallback) {
        $.ajax({
            url: "/certificate/" + id,
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    SearchCertificates: function (query, successCallback, errorCallback)
    {
        $.ajax({
            url: "/certificates/search",
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                certSearchResult = data;
                //successCallback(data);
            },
            error: function (x, t, m) {
                //errorCallback(x, t, m);
            }
        });
    },

    GetAdcsTemplates: function (successCallback, errorCallback) {
        $.ajax({
            url: "/pki-config/templates",
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
            }
        });
    },

    GetEnumMapping: async function () {
        const response = await axios.get("/view/enum-mapping");
        localStorage.setItem("uiEnumMap", JSON.stringify(response.data));

    },

    GetSecurityRoleDetails: function (id, successCallback, errorCallback)
    {
        $.ajax({
            url: "/security/role/" + id,
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    ImportUsersFromExternalIdentitySource: function (data, successCallback, errorCallback)
    {
        $.ajax({
            url: "/security/authenticable-principal/import",
            type: 'post',
            cache: false,
            async: true,
            dataType: "json",
            data: data,
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    GetAppConfig: function (successCallback, errorCallback)
    {
        $.ajax({
            url: "/config",
            type: 'get',
            cache: false,
            async: true,
            dataType: "json",
            success: function (data) {
                successCallback(data);
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    SetAppConfig: function (data, successCallback, errorCallback)
    {
        $.ajax({
            url: "/config",
            type: 'put',
            cache: false,
            async: true,
            data: data,
            dataType: "json",
            success: function (data) {
                successCallback();
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

    ResetUserPassword: function (data, successCallback, errorCallback) {
        $.ajax({
            url: "/security/authenticable-principal/password",
            type: 'put',
            cache: false,
            async: true,
            data: data,
            dataType: "json",
            success: function (response) {
                successCallback("Successfully reset password");
            },
            error: function (x, t, m) {
                errorCallback(x, t, m);
            }
        });
    },

}

ViewCertificate = {

    PageLoad: function ()
    {
        document.getElementById("defaultOpen").click();

        ViewCertificate.SubjectAlternativeNameTable = $('#subjectAlternativeNameTable');
        Services.GetCertificateDetails(ViewCertificate.GetCertificateId(), ViewCertificate.GetCertificateSuccessCallback, ViewCertificate.GetCertificateErrorCallback);
        ViewCertificate.InitializeDownloadUx();

    },

    GetCertificateId: function ()
    {
        return $('#certificate-id-hidden').val();
    },

    CertificateData: null,

    SubjectAlternativeNameTable: null,

    GetCertificateSuccessCallback: function (data)
    {
        CertificateData = data;

        $('#displayName').text(data.displayName);
        $('#thumbprint').text(data.thumbprint);
        $('#hashAlgorithm').text(data.hashAlgorithm);
        $('#cipherAlgorithm').text(data.cipherAlgorithm);
        $('#hasPrivateKey').text(data.hasPrivateKey);
        $('#expires').text(UiGlobal.GetDateString(data.expires));
        $('#windowsApi').text(UiGlobal.GetWindowsApiDisplay(data.windowsApi));
        $('#keySize').text(data.keySize);
        $('#storageFormat').text(data.certificateStorageFormat);

        ViewCertificate.InitializeSubjectAlternativeNamesTable(ViewCertificate.SubjectAlternativeNameTable, data.subject.subjectAlternativeName)
    },

    GetCertificateErrorCallback: function ()
    {
        UiGlobal.ShowError();
    },

    InitializeDownloadUx: function ()
    {
        $('#showCertificateDownloadOptionsButton').click(function () {

            $('#certificateDownloadOptionsModal').modal('show');

        });


        $('#cer-radio').change(function () {
            $("#download-certificate-button").prop('disabled', false);
            $("#download-cer-option-der").prop('disabled', false);
            $("#download-cer-option-b64").prop('disabled', false);
            $("#download-cer-option-b64").prop('checked', true);
            $("#cer-background").css("background-color", "#b0c4de");
            $("#pfx-background").css("background-color", "#f5f5f5");
        });

        $('#pfx-radio').change(function () {
            $("#download-certificate-button").prop('disabled', false);
            $("#download-pfx-includechain").prop('disabled', false);
            $("#download-cer-option-b64").prop('disabled', true);
            $("#download-cer-option-der").prop('disabled', true);
            $("#pfx-background").css("background-color", "#b0c4de");
            $("#cer-background").css("background-color", "#f5f5f5");
        });


        $('#download-certificate-button').click(function (e) {
            var type;
            var encoding;
            if ($("#cer-radio").prop("checked")) {
                if ($("#download-cer-option-b64").prop('checked')) {
                    type = "certb64";
                }
                else {
                    type = "certbinary";
                }
                type = "certbinary";
            }
            else if ($("#pfx-radio").prop("checked")) {
                type = "pfx";
            }
            else {
                type = "";
            }

            if ($('#include-chain-checkbox').prop('checked')) {
                type = type + "chain"
            }

            var downloadUri = "/certificate/" + $('#certificate-id').text();

            switch (type) {
                case "certbinarychain":
                    downloadUri = downloadUri + "/download/cer/binary/includechain";
                    break;
                case "certbinary":
                    downloadUri = downloadUri + "/download/cer/binary/nochain";
                    break;
                case "certb64chain":
                    downloadUri = downloadUri + "/download/cer/base64/includechain";
                    break;
                case "certb64":
                    downloadUri = downloadUri + "/download/cer/base64/nochain";
                    break;
                case "pfxchain":
                    downloadUri = downloadUri + "/download/pfx/includechain";
                    break;
                case "pfx":
                    downloadUri = downloadUri + "/download/pfx/nochain";
                    break;
                default:
                    downloadUri = downloadUri + "/download/cer/binary/nochain";
            }

            e.preventDefault();
            window.location.href = downloadUri;

        });
    },

    InitializeSubjectAlternativeNamesTable: function (table, sanList) {
        table.jsGrid({
            width: "100%",
            paging: true,
            autoload: true,
            pageLoading: true,

            controller: {
                loadData: function () {
                    return { data: sanList }
                    //return { data: sanList, itemsCount: 1 }
                }
            },

            fields: [
                {
                    title: "Subject Alternative Name",
                    itemTemplate: function (value, item) {
                        return item;
                    }
                },
            ]
        });
    },

    InitialzeAclTable: function ()
    {

    }

}
function WriteError(msg) {
    $('#error-alert').text(msg);
    $('#error-alert').show();
}

function DisplayCertificateDetails(data) {
    $("#displayName").text(data.displayName);
    $('#hashAlgorithm').text(data.hashAlgorithm);
    $('#thumbprint').text(data.thumbprint);
    $('#certificate-id').text(data.id);
    $('#cipherAlgorithm').text(data.cipherAlgorithm);
    $('#hasPrivateKey').text(data.hasPrivateKey);
    $('#expires').text(data.validTo);
    $('#keySize').text(data.keySize);
    $('#storageFormat').text(data.certificateStorageFormat);
    $('#windowsApi').text(data.windowsApi);
}

function GetPrivateCertificateRequestData() {
    var request = {
        SubjectCommonName: $('#commonName').val(),
        SubjectDepartment: $('#department').val(),
        SubjectOrganization: $('#organization').val(),
        SubjectCity: $('#city').val(),
        SubjectState: $('#state').val(),
        SubjectCountry: $('#country').val(),
        SubjectAlternativeNamesRaw: $('#sancsv').val(),
        CipherAlgorithm: $('#cipherAlgorithm').val(),
        Provider: $('#windowsApi').val(),
        HashAlgorithm: $('#hashAlgorithm').val(),
        KeySize: $('#keySize').val(),
        KeyUsage: $('#keyUsage').val()
    }

    return request;
}

function ValidateNewPrivateCertificate(request) {

    //var spinner = StartSpinner();
    var keysize = request.KeySize;
    var provider = request.Provider;
    var cipheralg = request.CipherAlgorithm;
    var validRsaKeySizes = ["2048", "4096", "8192", "16384"]
    var keyusage = request.KeyUsage;
    //var role = $('#role').val();


    //0 is RSA
    if (cipheralg == "0") {
        if (validRsaKeySizes.indexOf(keysize) != 0) {
            var msg = "Rsa keysize is invalid. Rsa only supports 2048, 4096, 8192, or 16384. Choose 2048 if you are unsure.";
            WriteError(msg)
            return false;
        }
    }

    //1 is EC
    if (cipheralg == "1") {
        if (provider != "1") {
            var msg = "Elliptic Curve only supports the provider Cng (CryptoApi Next Generation)";
            WriteError(msg);
            return false;
        }

        if (keysize != 256) {
            var msg = "Elliptic Curve only supports a keysize of 256bits";
            WriteError(msg);
            return false;
        }
    }


    if ($("#SubjectCommonName").val() != "") {
        var result = Services.ValidateDnsName($("#SubjectCommonName").val())
        if (result["Status"] != "valid") {
            WriteError("Invalid subject common name provided")
            return false;
        }
    }
    else {
        WriteError("You must specify a subject common name");
        return false;
    }

    if ($("#SubjectAlternativeNamesRaw").val() != "") {
        var result = Services.ValidateDnsSan($("#SubjectAlternativeNamesRaw").val())
        if (result["Status"] != "valid") {
            WriteError("Invalid subject alternative name. Either remove the subject alternative name, or specify the san with correct comma separated format. ")
            return false;
        }
    }


    if (keyusage == null) {
        WriteError("Key Usage must be specified. If you're not an Admin, you won't be able to select anything except 'Server'")
        return false;
    }

    if (!keyusage.constructor == Array) {
        WriteError("Key Usage must be specified. If you're not an Admin, you won't be able to select anything except 'Server'")
        return false;
    }

    if (keyusage.length < 1 || keyusage.length > 3) {
        WriteError("Key Usage must be specified. If you're not an Admin, you won't be able to select anything except 'Server'")
        return false;
    }

    //if (role != "Admin" && keyusage != 1) {
    //    $(".modal-body").text("Key Usage must be specified. If you're not an Admin, you won't be able to select anything except 'Server'");
    //    $('#msgModal').modal('show');
    //    return false;
    //}

    return true;
    //$('#formSubmitButtonHidden').click();


}



var PrivateCertificateAuthority = {

    CreateCertificateSuccessCallback: function (data) {

        window.sessionStorage.setItem("certificateId", data.id);
        $('#create-private-certificate-btn').prop('disabled', false);
        window.location.replace("/view/certificate/" + data.id);
    },

    CreateCertificateErrorCallback: function (x, t, m) {

        WriteError(x.responseJSON.message);

        $('#create-private-certificate-btn').prop('disabled', false);

    },

    GetCertificateErrorCallback: function (x, t, m) {

        //WriteError(x.responseJSON.message);

        //$('#create-private-certificate-btn').prop('disabled', false);

    },

    GetCertificateSuccessCallback: function (data) {
        DisplayCertificateDetails(data);
    },

    GetCertificateDetails: function () {
        //var id = window.location.pathname.replace('/views/certificate/', '');
        var id = window.sessionStorage.getItem("certificateId");
        Services.GetCertificateDetails(id, this.GetCertificateSuccessCallback, this.GetCertificateErrorCallback);
    },

    RegisterCreateCertificateButtonEvent: function () {
        $('#create-private-certificate-btn').click(function () {

            $('#error-alert').hide();
            $('#success-alert').hide();
            $('#create-private-certificate-btn').prop('disabled', true);

            var request = GetPrivateCertificateRequestData();

            //if (!ValidateNewPrivateCertificate(request))
            //{
            //    $('#create-private-certificate-btn').prop('disabled', false);
            //    return false;
            //}

            Services.CreateCertificate(request, PrivateCertificateAuthority.CreateCertificateSuccessCallback, PrivateCertificateAuthority.CreateCertificateErrorCallback);

        });

    },

    InitializeUi: function () {

        CmOptions.hashAlgorithmOptions.forEach(function (item) {

            var element = $('#hashAlgorithm');

            element.append($('<option>', {
                value: item.Name,
                text: item.Name
            }));

            if (item.Primary) {
                element.val(item.Name);
            }
        });

        CmOptions.cipherOptions.forEach(function (item) {
            $('#cipherAlgorithm').append($('<option>', {
                value: item.Name,
                text: item.Display
            }));
        });

        CmOptions.keyUsageOptions.forEach(function (item) {
            if (item.Primitive) {

                if (item.Primary)
                {
                    $('#keyUsage').append($('<option>', {
                        value: item.Name,
                        text: item.Display,
                        selected: "selected"
                    }));
                }
                else
                {
                    $('#keyUsage').append($('<option>', {
                        value: item.Name,
                        text: item.Display
                    }));
                }
                
            }
        });

        $('#keyUsage').select2({ width: '100%' });

        CmOptions.windowsApiOptions.forEach(function (item) {
            $('#windowsApi').append($('<option>', {
                value: item.Name,
                text: item.Display
            }));
        });
    },

    PageLoad: function () {
        PrivateCertificateAuthority.InitializeUi();
        PrivateCertificateAuthority.RegisterCreateCertificateButtonEvent();
    }
};

var ViewAllCertificates = {

    PageLoad: function ()
    {
        ViewAllCertificates.Grid = $('#allCertificatesTable');

        ViewAllCertificates.InitializeGrid();
    },

    Grid: null,

    Controller: {
        loadData: function (filter) {
            var d = $.Deferred();
            $.ajax({
                type: "GET",
                url: "/certificates",
                dataType: "json"
            }).done(function (response) {
                d.resolve(response.payload);
            });
            return d.promise();
        },
        deleteItem: function (item) {
            $.ajax({
                type: "DELETE",
                url: "/certificate",
                data: item
            }).fail(function (xhr, ajaxOptions, thrownError) {
                ViewAllCertificates.HandleError(xhr.responseJSON.message, ViewAllCertificates.Grid);
            });
        }
    },

    InitializeGrid: function ()
    {
        ViewAllCertificates.Grid.jsGrid({
            height: "auto",
            width: "100%",

            //filtering: true,
            editing: false,
            sorting: true,
            paging: true,
            autoload: true,

            pageSize: 15,
            pageButtonCount: 5,

            deleteConfirm: "Do you really want to delete this certificate?",

            controller: ViewAllCertificates.Controller,

            fields: [
                { title: "Display Name", name: "displayName", type: "text" },
                { title: "Hash", name: "hashAlgorithm", type: "text", width: 25 },
                { title: "Cipher", name: "cipherAlgorithm", type: "text", width: 25 },
                {
                    title: "Expires", name: "validTo", type: "text", width: 40,
                    itemTemplate: function (value, item) {
                        return UiGlobal.GetDateString(value);
                    } },
                { title: "Thumbprint", name: "thumbprint", type: "text" },
                {
                    name: "details",
                    title: "Action",
                    width: 20,
                    itemTemplate: function (value, item) {
                        //var $text = $("<p>").text(item.MyField);
                        var $link = $("<a>").attr("href", '/view/certificate/' + item.id).text("View");
                        return $("<div>").append($link);
                    }
                },
                {
                    type: "control",
                    editButton: false,
                    width: 10
                }
            ],

            onItemInserting: function (args) { SecurityRoles.ResetErrorState(); },
            onItemUpdating: function (args) { SecurityRoles.ResetErrorState(); },
            onItemDeleting: function (args) { SecurityRoles.ResetErrorState(); }

        });
    }


}